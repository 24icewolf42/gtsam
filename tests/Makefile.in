# Makefile.in generated by automake 1.11.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

#----------------------------------------------------------------------------------------------------
# GTSAM tests
# More elaborate unit tests that test functionality with slam examples
#----------------------------------------------------------------------------------------------------



VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
check_PROGRAMS = testBayesNetPreconditioner$(EXEEXT) \
	testConstraintOptimizer$(EXEEXT) testGaussianBayesNet$(EXEEXT) \
	testGaussianFactor$(EXEEXT) testGaussianFactorGraph$(EXEEXT) \
	testGaussianISAM$(EXEEXT) testGaussianISAM2$(EXEEXT) \
	testGraph$(EXEEXT) testInference$(EXEEXT) \
	testIterative$(EXEEXT) testJunctionTree$(EXEEXT) \
	testNonlinearEquality$(EXEEXT) testNonlinearFactor$(EXEEXT) \
	testNonlinearFactorGraph$(EXEEXT) \
	testNonlinearOptimizer$(EXEEXT) testSQP$(EXEEXT) \
	testSubgraphPreconditioner$(EXEEXT) \
	testSymbolicBayesNet$(EXEEXT) testSymbolicFactorGraph$(EXEEXT) \
	testTupleConfig$(EXEEXT)
noinst_PROGRAMS = timeGaussianFactorGraph$(EXEEXT)
subdir = tests
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
LIBRARIES = $(noinst_LIBRARIES)
ARFLAGS = cru
libtests_a_AR = $(AR) $(ARFLAGS)
libtests_a_LIBADD =
am_libtests_a_OBJECTS = smallExample.$(OBJEXT)
libtests_a_OBJECTS = $(am_libtests_a_OBJECTS)
PROGRAMS = $(noinst_PROGRAMS)
testBayesNetPreconditioner_SOURCES = testBayesNetPreconditioner.cpp
testBayesNetPreconditioner_OBJECTS =  \
	testBayesNetPreconditioner.$(OBJEXT)
testBayesNetPreconditioner_LDADD = $(LDADD)
testBayesNetPreconditioner_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testConstraintOptimizer_SOURCES = testConstraintOptimizer.cpp
testConstraintOptimizer_OBJECTS = testConstraintOptimizer.$(OBJEXT)
testConstraintOptimizer_LDADD = $(LDADD)
testConstraintOptimizer_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testGaussianBayesNet_SOURCES = testGaussianBayesNet.cpp
testGaussianBayesNet_OBJECTS = testGaussianBayesNet.$(OBJEXT)
testGaussianBayesNet_LDADD = $(LDADD)
testGaussianBayesNet_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testGaussianFactor_SOURCES = testGaussianFactor.cpp
testGaussianFactor_OBJECTS = testGaussianFactor.$(OBJEXT)
testGaussianFactor_LDADD = $(LDADD)
testGaussianFactor_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testGaussianFactorGraph_SOURCES = testGaussianFactorGraph.cpp
testGaussianFactorGraph_OBJECTS = testGaussianFactorGraph.$(OBJEXT)
testGaussianFactorGraph_LDADD = $(LDADD)
testGaussianFactorGraph_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testGaussianISAM_SOURCES = testGaussianISAM.cpp
testGaussianISAM_OBJECTS = testGaussianISAM.$(OBJEXT)
testGaussianISAM_LDADD = $(LDADD)
testGaussianISAM_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testGaussianISAM2_SOURCES = testGaussianISAM2.cpp
testGaussianISAM2_OBJECTS = testGaussianISAM2.$(OBJEXT)
testGaussianISAM2_LDADD = $(LDADD)
testGaussianISAM2_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testGraph_SOURCES = testGraph.cpp
testGraph_OBJECTS = testGraph.$(OBJEXT)
testGraph_LDADD = $(LDADD)
testGraph_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testInference_SOURCES = testInference.cpp
testInference_OBJECTS = testInference.$(OBJEXT)
testInference_LDADD = $(LDADD)
testInference_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testIterative_SOURCES = testIterative.cpp
testIterative_OBJECTS = testIterative.$(OBJEXT)
testIterative_LDADD = $(LDADD)
testIterative_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testJunctionTree_SOURCES = testJunctionTree.cpp
testJunctionTree_OBJECTS = testJunctionTree.$(OBJEXT)
testJunctionTree_LDADD = $(LDADD)
testJunctionTree_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testNonlinearEquality_SOURCES = testNonlinearEquality.cpp
testNonlinearEquality_OBJECTS = testNonlinearEquality.$(OBJEXT)
testNonlinearEquality_LDADD = $(LDADD)
testNonlinearEquality_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testNonlinearFactor_SOURCES = testNonlinearFactor.cpp
testNonlinearFactor_OBJECTS = testNonlinearFactor.$(OBJEXT)
testNonlinearFactor_LDADD = $(LDADD)
testNonlinearFactor_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testNonlinearFactorGraph_SOURCES = testNonlinearFactorGraph.cpp
testNonlinearFactorGraph_OBJECTS = testNonlinearFactorGraph.$(OBJEXT)
testNonlinearFactorGraph_LDADD = $(LDADD)
testNonlinearFactorGraph_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testNonlinearOptimizer_SOURCES = testNonlinearOptimizer.cpp
testNonlinearOptimizer_OBJECTS = testNonlinearOptimizer.$(OBJEXT)
testNonlinearOptimizer_LDADD = $(LDADD)
testNonlinearOptimizer_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testSQP_SOURCES = testSQP.cpp
testSQP_OBJECTS = testSQP.$(OBJEXT)
testSQP_LDADD = $(LDADD)
testSQP_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testSubgraphPreconditioner_SOURCES = testSubgraphPreconditioner.cpp
testSubgraphPreconditioner_OBJECTS =  \
	testSubgraphPreconditioner.$(OBJEXT)
testSubgraphPreconditioner_LDADD = $(LDADD)
testSubgraphPreconditioner_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testSymbolicBayesNet_SOURCES = testSymbolicBayesNet.cpp
testSymbolicBayesNet_OBJECTS = testSymbolicBayesNet.$(OBJEXT)
testSymbolicBayesNet_LDADD = $(LDADD)
testSymbolicBayesNet_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testSymbolicFactorGraph_SOURCES = testSymbolicFactorGraph.cpp
testSymbolicFactorGraph_OBJECTS = testSymbolicFactorGraph.$(OBJEXT)
testSymbolicFactorGraph_LDADD = $(LDADD)
testSymbolicFactorGraph_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
testTupleConfig_SOURCES = testTupleConfig.cpp
testTupleConfig_OBJECTS = testTupleConfig.$(OBJEXT)
testTupleConfig_LDADD = $(LDADD)
testTupleConfig_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
timeGaussianFactorGraph_SOURCES = timeGaussianFactorGraph.cpp
timeGaussianFactorGraph_OBJECTS = timeGaussianFactorGraph.$(OBJEXT)
timeGaussianFactorGraph_LDADD = $(LDADD)
timeGaussianFactorGraph_DEPENDENCIES = libtests.a ../libgtsam.la \
	../CppUnitLite/libCppUnitLite.a
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libtests_a_SOURCES) testBayesNetPreconditioner.cpp \
	testConstraintOptimizer.cpp testGaussianBayesNet.cpp \
	testGaussianFactor.cpp testGaussianFactorGraph.cpp \
	testGaussianISAM.cpp testGaussianISAM2.cpp testGraph.cpp \
	testInference.cpp testIterative.cpp testJunctionTree.cpp \
	testNonlinearEquality.cpp testNonlinearFactor.cpp \
	testNonlinearFactorGraph.cpp testNonlinearOptimizer.cpp \
	testSQP.cpp testSubgraphPreconditioner.cpp \
	testSymbolicBayesNet.cpp testSymbolicFactorGraph.cpp \
	testTupleConfig.cpp timeGaussianFactorGraph.cpp
DIST_SOURCES = $(libtests_a_SOURCES) testBayesNetPreconditioner.cpp \
	testConstraintOptimizer.cpp testGaussianBayesNet.cpp \
	testGaussianFactor.cpp testGaussianFactorGraph.cpp \
	testGaussianISAM.cpp testGaussianISAM2.cpp testGraph.cpp \
	testInference.cpp testIterative.cpp testJunctionTree.cpp \
	testNonlinearEquality.cpp testNonlinearFactor.cpp \
	testNonlinearFactorGraph.cpp testNonlinearOptimizer.cpp \
	testSQP.cpp testSubgraphPreconditioner.cpp \
	testSymbolicBayesNet.cpp testSymbolicFactorGraph.cpp \
	testTupleConfig.cpp timeGaussianFactorGraph.cpp
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
am__tty_colors = \
red=; grn=; lgn=; blu=; std=
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
FGREP = @FGREP@
GREP = @GREP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
NM = @NM@
NMEDIT = @NMEDIT@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
RANLIB = @RANLIB@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
boost = @boost@
boost_serialization = @boost_serialization@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
lt_ECHO = @lt_ECHO@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
toolbox = @toolbox@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@

#----------------------------------------------------------------------------------------------------
# rules to build local library
#----------------------------------------------------------------------------------------------------
noinst_HEADERS = smallExample.h
noinst_LIBRARIES = libtests.a
libtests_a_SOURCES = smallExample.cpp
AM_CPPFLAGS = -I$(boost) -I../colamd -I../base -I../geometry -I../cpp -I../slam 

#----------------------------------------------------------------------------------------------------
# rules to build unit tests
#----------------------------------------------------------------------------------------------------
TESTS = $(check_PROGRAMS)
AM_LDFLAGS = $(BOOST_LDFLAGS) $(boost_serialization) 
LDADD = libtests.a ../libgtsam.la ../CppUnitLite/libCppUnitLite.a  
AM_DEFAULT_SOURCE_EXT = .cpp
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu tests/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu tests/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
libtests.a: $(libtests_a_OBJECTS) $(libtests_a_DEPENDENCIES) 
	-rm -f libtests.a
	$(libtests_a_AR) libtests.a $(libtests_a_OBJECTS) $(libtests_a_LIBADD)
	$(RANLIB) libtests.a

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

clean-noinstPROGRAMS:
	@list='$(noinst_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
testBayesNetPreconditioner$(EXEEXT): $(testBayesNetPreconditioner_OBJECTS) $(testBayesNetPreconditioner_DEPENDENCIES) 
	@rm -f testBayesNetPreconditioner$(EXEEXT)
	$(CXXLINK) $(testBayesNetPreconditioner_OBJECTS) $(testBayesNetPreconditioner_LDADD) $(LIBS)
testConstraintOptimizer$(EXEEXT): $(testConstraintOptimizer_OBJECTS) $(testConstraintOptimizer_DEPENDENCIES) 
	@rm -f testConstraintOptimizer$(EXEEXT)
	$(CXXLINK) $(testConstraintOptimizer_OBJECTS) $(testConstraintOptimizer_LDADD) $(LIBS)
testGaussianBayesNet$(EXEEXT): $(testGaussianBayesNet_OBJECTS) $(testGaussianBayesNet_DEPENDENCIES) 
	@rm -f testGaussianBayesNet$(EXEEXT)
	$(CXXLINK) $(testGaussianBayesNet_OBJECTS) $(testGaussianBayesNet_LDADD) $(LIBS)
testGaussianFactor$(EXEEXT): $(testGaussianFactor_OBJECTS) $(testGaussianFactor_DEPENDENCIES) 
	@rm -f testGaussianFactor$(EXEEXT)
	$(CXXLINK) $(testGaussianFactor_OBJECTS) $(testGaussianFactor_LDADD) $(LIBS)
testGaussianFactorGraph$(EXEEXT): $(testGaussianFactorGraph_OBJECTS) $(testGaussianFactorGraph_DEPENDENCIES) 
	@rm -f testGaussianFactorGraph$(EXEEXT)
	$(CXXLINK) $(testGaussianFactorGraph_OBJECTS) $(testGaussianFactorGraph_LDADD) $(LIBS)
testGaussianISAM$(EXEEXT): $(testGaussianISAM_OBJECTS) $(testGaussianISAM_DEPENDENCIES) 
	@rm -f testGaussianISAM$(EXEEXT)
	$(CXXLINK) $(testGaussianISAM_OBJECTS) $(testGaussianISAM_LDADD) $(LIBS)
testGaussianISAM2$(EXEEXT): $(testGaussianISAM2_OBJECTS) $(testGaussianISAM2_DEPENDENCIES) 
	@rm -f testGaussianISAM2$(EXEEXT)
	$(CXXLINK) $(testGaussianISAM2_OBJECTS) $(testGaussianISAM2_LDADD) $(LIBS)
testGraph$(EXEEXT): $(testGraph_OBJECTS) $(testGraph_DEPENDENCIES) 
	@rm -f testGraph$(EXEEXT)
	$(CXXLINK) $(testGraph_OBJECTS) $(testGraph_LDADD) $(LIBS)
testInference$(EXEEXT): $(testInference_OBJECTS) $(testInference_DEPENDENCIES) 
	@rm -f testInference$(EXEEXT)
	$(CXXLINK) $(testInference_OBJECTS) $(testInference_LDADD) $(LIBS)
testIterative$(EXEEXT): $(testIterative_OBJECTS) $(testIterative_DEPENDENCIES) 
	@rm -f testIterative$(EXEEXT)
	$(CXXLINK) $(testIterative_OBJECTS) $(testIterative_LDADD) $(LIBS)
testJunctionTree$(EXEEXT): $(testJunctionTree_OBJECTS) $(testJunctionTree_DEPENDENCIES) 
	@rm -f testJunctionTree$(EXEEXT)
	$(CXXLINK) $(testJunctionTree_OBJECTS) $(testJunctionTree_LDADD) $(LIBS)
testNonlinearEquality$(EXEEXT): $(testNonlinearEquality_OBJECTS) $(testNonlinearEquality_DEPENDENCIES) 
	@rm -f testNonlinearEquality$(EXEEXT)
	$(CXXLINK) $(testNonlinearEquality_OBJECTS) $(testNonlinearEquality_LDADD) $(LIBS)
testNonlinearFactor$(EXEEXT): $(testNonlinearFactor_OBJECTS) $(testNonlinearFactor_DEPENDENCIES) 
	@rm -f testNonlinearFactor$(EXEEXT)
	$(CXXLINK) $(testNonlinearFactor_OBJECTS) $(testNonlinearFactor_LDADD) $(LIBS)
testNonlinearFactorGraph$(EXEEXT): $(testNonlinearFactorGraph_OBJECTS) $(testNonlinearFactorGraph_DEPENDENCIES) 
	@rm -f testNonlinearFactorGraph$(EXEEXT)
	$(CXXLINK) $(testNonlinearFactorGraph_OBJECTS) $(testNonlinearFactorGraph_LDADD) $(LIBS)
testNonlinearOptimizer$(EXEEXT): $(testNonlinearOptimizer_OBJECTS) $(testNonlinearOptimizer_DEPENDENCIES) 
	@rm -f testNonlinearOptimizer$(EXEEXT)
	$(CXXLINK) $(testNonlinearOptimizer_OBJECTS) $(testNonlinearOptimizer_LDADD) $(LIBS)
testSQP$(EXEEXT): $(testSQP_OBJECTS) $(testSQP_DEPENDENCIES) 
	@rm -f testSQP$(EXEEXT)
	$(CXXLINK) $(testSQP_OBJECTS) $(testSQP_LDADD) $(LIBS)
testSubgraphPreconditioner$(EXEEXT): $(testSubgraphPreconditioner_OBJECTS) $(testSubgraphPreconditioner_DEPENDENCIES) 
	@rm -f testSubgraphPreconditioner$(EXEEXT)
	$(CXXLINK) $(testSubgraphPreconditioner_OBJECTS) $(testSubgraphPreconditioner_LDADD) $(LIBS)
testSymbolicBayesNet$(EXEEXT): $(testSymbolicBayesNet_OBJECTS) $(testSymbolicBayesNet_DEPENDENCIES) 
	@rm -f testSymbolicBayesNet$(EXEEXT)
	$(CXXLINK) $(testSymbolicBayesNet_OBJECTS) $(testSymbolicBayesNet_LDADD) $(LIBS)
testSymbolicFactorGraph$(EXEEXT): $(testSymbolicFactorGraph_OBJECTS) $(testSymbolicFactorGraph_DEPENDENCIES) 
	@rm -f testSymbolicFactorGraph$(EXEEXT)
	$(CXXLINK) $(testSymbolicFactorGraph_OBJECTS) $(testSymbolicFactorGraph_LDADD) $(LIBS)
testTupleConfig$(EXEEXT): $(testTupleConfig_OBJECTS) $(testTupleConfig_DEPENDENCIES) 
	@rm -f testTupleConfig$(EXEEXT)
	$(CXXLINK) $(testTupleConfig_OBJECTS) $(testTupleConfig_LDADD) $(LIBS)
timeGaussianFactorGraph$(EXEEXT): $(timeGaussianFactorGraph_OBJECTS) $(timeGaussianFactorGraph_DEPENDENCIES) 
	@rm -f timeGaussianFactorGraph$(EXEEXT)
	$(CXXLINK) $(timeGaussianFactorGraph_OBJECTS) $(timeGaussianFactorGraph_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/smallExample.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testBayesNetPreconditioner.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testConstraintOptimizer.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testGaussianBayesNet.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testGaussianFactor.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testGaussianFactorGraph.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testGaussianISAM.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testGaussianISAM2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testGraph.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testInference.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testIterative.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testJunctionTree.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testNonlinearEquality.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testNonlinearFactor.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testNonlinearFactorGraph.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testNonlinearOptimizer.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testSQP.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testSubgraphPreconditioner.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testSymbolicBayesNet.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testSymbolicFactorGraph.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testTupleConfig.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/timeGaussianFactorGraph.Po@am__quote@

.cpp.o:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
@am__fastdepCXX_TRUE@	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	$(am__tty_colors); \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		col=$$red; res=XPASS; \
	      ;; \
	      *) \
		col=$$grn; res=PASS; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xfail=`expr $$xfail + 1`; \
		col=$$lgn; res=XFAIL; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		col=$$red; res=FAIL; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      col=$$blu; res=SKIP; \
	    fi; \
	    echo "$${col}$$res$${std}: $$tst"; \
	  done; \
	  if test "$$all" -eq 1; then \
	    tests="test"; \
	    All=""; \
	  else \
	    tests="tests"; \
	    All="All "; \
	  fi; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="$$All$$all $$tests passed"; \
	    else \
	      if test "$$xfail" -eq 1; then failures=failure; else failures=failures; fi; \
	      banner="$$All$$all $$tests behaved as expected ($$xfail expected $$failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all $$tests failed"; \
	    else \
	      if test "$$xpass" -eq 1; then passes=pass; else passes=passes; fi; \
	      banner="$$failed of $$all $$tests did not behave as expected ($$xpass unexpected $$passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    if test "$$skip" -eq 1; then \
	      skipped="($$skip test was not run)"; \
	    else \
	      skipped="($$skip tests were not run)"; \
	    fi; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  if test "$$failed" -eq 0; then \
	    echo "$$grn$$dashes"; \
	  else \
	    echo "$$red$$dashes"; \
	  fi; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes$$std"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile $(LIBRARIES) $(PROGRAMS) $(HEADERS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libtool \
	clean-noinstLIBRARIES clean-noinstPROGRAMS mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic clean-libtool \
	clean-noinstLIBRARIES clean-noinstPROGRAMS ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am


# rule to run an executable
%.run: % $(LDADD)
	./$^

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
