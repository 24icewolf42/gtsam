% automatically generated by wrap
classdef Point2 < handle
  properties
    self = 0
  end
  methods
    function obj = Point2(varargin)
      if nargin == 2 && isa(varargin{1}, 'uint64') && varargin{1} == uint64(5139824614673773682)
        obj.self = varargin{2};
        geometry_wrapper(obj.self);
      elseif nargin == 0
        obj.self = geometry_wrapper(1);
      elseif nargin == 2 && isa(varargin{1},'double') && isa(varargin{2},'double')
        obj.self = geometry_wrapper(2,varargin{1},varargin{2});
      else
        error('Arguments do not match any overload of Point2 constructor');
      end
    end

    function delete(obj)
      geometry_wrapper(3, obj.self);
    end

    function display(obj), obj.print(''); end

    function disp(obj), obj.display; end

    function varargout = argChar(self, varargin)
      if length(varargin) == 1 && isa(varargin{1},'char')
        geometry_wrapper(4, self, varargin{:});
      else
        error('Arguments do not match any overload of function Point2.argChar');
      end
    end

    function varargout = argUChar(self, varargin)
      if length(varargin) == 1 && isa(varargin{1},'char')
        geometry_wrapper(5, self, varargin{:});
      else
        error('Arguments do not match any overload of function Point2.argUChar');
      end
    end

    function varargout = dim(self, varargin)
      if length(varargin) == 0
        varargout{1} = geometry_wrapper(6, self, varargin{:});
      else
        error('Arguments do not match any overload of function Point2.dim');
      end
    end

    function varargout = returnChar(self, varargin)
      if length(varargin) == 0
        varargout{1} = geometry_wrapper(7, self, varargin{:});
      else
        error('Arguments do not match any overload of function Point2.returnChar');
      end
    end

    function varargout = vectorConfusion(self, varargin)
      if length(varargin) == 0
        varargout{1} = geometry_wrapper(8, self, varargin{:});
      else
        error('Arguments do not match any overload of function Point2.vectorConfusion');
      end
    end

    function varargout = x(self, varargin)
      if length(varargin) == 0
        varargout{1} = geometry_wrapper(9, self, varargin{:});
      else
        error('Arguments do not match any overload of function Point2.x');
      end
    end

    function varargout = y(self, varargin)
      if length(varargin) == 0
        varargout{1} = geometry_wrapper(10, self, varargin{:});
      else
        error('Arguments do not match any overload of function Point2.y');
      end
    end

  end

  methods(Static = true)
  end
end
