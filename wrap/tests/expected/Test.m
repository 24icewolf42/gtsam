% automatically generated by wrap
classdef Test < handle
  properties
    ptr_Test = 0
  end
  methods
    function obj = Test(varargin)
      if nargin == 2 && isa(varargin{1}, 'uint64') && varargin{1} == uint64(5139824614673773682)
        my_ptr = varargin{2};
        geometry_wrapper(17, my_ptr);
      elseif nargin == 0
        my_ptr = geometry_wrapper(18);
      elseif nargin == 2 && isa(varargin{1},'double') && isa(varargin{2},'double')
        my_ptr = geometry_wrapper(19, varargin{1}, varargin{2});
      else
        error('Arguments do not match any overload of Test constructor');
      end
      obj.ptr_Test = my_ptr;
    end

    function delete(obj)
      geometry_wrapper(20, obj.ptr_Test);
    end

    function display(obj), obj.print(''); end

    function disp(obj), obj.display; end

    function varargout = arg_EigenConstRef(this, varargin)
      if length(varargin) == 1 && isa(varargin{1},'double')
        geometry_wrapper(21, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.arg_EigenConstRef');
      end
    end

    function varargout = create_MixedPtrs(this, varargin)
      if length(varargin) == 0
        [ varargout{1} varargout{2} ] = geometry_wrapper(22, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.create_MixedPtrs');
      end
    end

    function varargout = create_ptrs(this, varargin)
      if length(varargin) == 0
        [ varargout{1} varargout{2} ] = geometry_wrapper(23, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.create_ptrs');
      end
    end

    function varargout = print(this, varargin)
      if length(varargin) == 0
        geometry_wrapper(24, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.print');
      end
    end

    function varargout = return_Point2Ptr(this, varargin)
      if length(varargin) == 1 && isa(varargin{1},'logical')
        varargout{1} = geometry_wrapper(25, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.return_Point2Ptr');
      end
    end

    function varargout = return_Test(this, varargin)
      if length(varargin) == 1 && isa(varargin{1},'Test')
        varargout{1} = geometry_wrapper(26, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.return_Test');
      end
    end

    function varargout = return_TestPtr(this, varargin)
      if length(varargin) == 1 && isa(varargin{1},'Test')
        varargout{1} = geometry_wrapper(27, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.return_TestPtr');
      end
    end

    function varargout = return_bool(this, varargin)
      if length(varargin) == 1 && isa(varargin{1},'logical')
        varargout{1} = geometry_wrapper(28, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.return_bool');
      end
    end

    function varargout = return_double(this, varargin)
      if length(varargin) == 1 && isa(varargin{1},'double')
        varargout{1} = geometry_wrapper(29, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.return_double');
      end
    end

    function varargout = return_field(this, varargin)
      if length(varargin) == 1 && isa(varargin{1},'Test')
        varargout{1} = geometry_wrapper(30, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.return_field');
      end
    end

    function varargout = return_int(this, varargin)
      if length(varargin) == 1 && isa(varargin{1},'numeric')
        varargout{1} = geometry_wrapper(31, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.return_int');
      end
    end

    function varargout = return_matrix1(this, varargin)
      if length(varargin) == 1 && isa(varargin{1},'double')
        varargout{1} = geometry_wrapper(32, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.return_matrix1');
      end
    end

    function varargout = return_matrix2(this, varargin)
      if length(varargin) == 1 && isa(varargin{1},'double')
        varargout{1} = geometry_wrapper(33, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.return_matrix2');
      end
    end

    function varargout = return_pair(this, varargin)
      if length(varargin) == 2 && isa(varargin{1},'double') && isa(varargin{2},'double')
        [ varargout{1} varargout{2} ] = geometry_wrapper(34, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.return_pair');
      end
    end

    function varargout = return_ptrs(this, varargin)
      if length(varargin) == 2 && isa(varargin{1},'Test') && isa(varargin{2},'Test')
        [ varargout{1} varargout{2} ] = geometry_wrapper(35, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.return_ptrs');
      end
    end

    function varargout = return_size_t(this, varargin)
      if length(varargin) == 1 && isa(varargin{1},'numeric')
        varargout{1} = geometry_wrapper(36, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.return_size_t');
      end
    end

    function varargout = return_string(this, varargin)
      if length(varargin) == 1 && isa(varargin{1},'char')
        varargout{1} = geometry_wrapper(37, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.return_string');
      end
    end

    function varargout = return_vector1(this, varargin)
      if length(varargin) == 1 && isa(varargin{1},'double')
        varargout{1} = geometry_wrapper(38, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.return_vector1');
      end
    end

    function varargout = return_vector2(this, varargin)
      if length(varargin) == 1 && isa(varargin{1},'double')
        varargout{1} = geometry_wrapper(39, this, varargin{:});
      else
        error('Arguments do not match any overload of function Test.return_vector2');
      end
    end

  end

  methods(Static = true)
  end
end
